<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <style type="text/css" media="screen">
    p, td { line-height: 1.3; }
    p { padding-bottom: 1em; }
    a { color: #3697b3; font-weight: bold; text-decoration: none; }
    a:hover { color: #000; text-decoration: underline; }
    a:active { color: #000; text-decoration: underline; }
  </style>
</head>
<body style="font-size:12px;color:#262626;line-height:1.3;font-family:Arial, Helvetica, sans-serif;background-color:#fff;">
<div class="ennote"><div><div><br clear="none"/></div><table style="table-layout: fixed; border-collapse: collapse; min-width: 100%;"><col span="1" style="width: 244px;"></col><col span="1" style="width: 285px;"></col><col span="1" style="width: 354px;"></col><col span="1" style="width: 359px;"></col><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>面试准备-自我陈述方面</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div> 实例</div><ul><li><div>自如谈兴趣,巧妙示实例,适时讨疑问(1)</div></li><li><div>节奏要适宜,切忌小聪明</div></li></ul><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>1.遇到面试官提问不会的问题时,要说没有涉及过,想要弄明白这个问题,可否指点一下(主要表现出求知欲与谦虚)</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>实战</div><ul><li><div>方向要对,过程要细</div></li><li><div>胆子要大,心态要和</div></li></ul></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>遇到不会的不要灰心,要争取在面试中得到点什么,比如适时讨疑问,不要轻易放弃,学会之后是否还可以来面试</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>一面/二面</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>jquery常见问题</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>1.核心架构</div><div>2.事件委托</div><div>3.插件机制</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>1.(慕课网:jq源码解析 架构 2-3)</div><div>ajQuery.fn = ajQuery.prototype = {</div><div>name: 'aaron',</div><div>init: function(selector) {</div><div>this.selector = selector;</div><div>return this;</div><div>},</div><div>constructor: ajQuery</div><div>}</div><div><span style="color: #b22222;">ajQuery.fn.init.prototype = ajQuery.fn</span></div><div><br clear="none"/></div><div>2.(慕课网:jq源码解析 DOM 5-12)</div><div><span style="white-space: pre-wrap; background: #eeeeee; word-wrap: break-word; border: 1px solid #cccccc; border-radius: 2px; font-size: 13px; word-break: break-word; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: #ff0000; font-family: Monaco, Menlo, 'Ubuntu Mono', Consolas, source-code-pro, monospace; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: bold;">简单来说就是把 target 到根节点 div 通过 node.parentNode 遍历一遍，然后找到对应的委托元素节点，如果符合就缓存起来用于之后的操作，可以通过 jQuery.event.handlers 方法我们可以获取类似这种的一组数据结构</span></div><div><span style="font-size: 14px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: pre; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #f6f8fa; color: #000000; font-family: Consolas, Inconsolata, Courier, monospace; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: bold;">$(document).on(</span><span style="box-sizing: border-box; font-size: 14px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: pre; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #f6f8fa; color: #009900; font-family: Consolas, Inconsolata, Courier, monospace; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: bold;">&quot;click&quot;</span><span style="font-size: 14px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: pre; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #f6f8fa; color: #000000; font-family: Consolas, Inconsolata, Courier, monospace; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: bold;">,</span><span style="box-sizing: border-box; font-size: 14px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: pre; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #f6f8fa; color: #009900; font-family: Consolas, Inconsolata, Courier, monospace; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: bold;">&quot;button&quot;</span><span style="font-size: 14px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: pre; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #f6f8fa; color: #000000; font-family: Consolas, Inconsolata, Courier, monospace; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: bold;">,</span><span style="box-sizing: border-box; font-size: 14px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: pre; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #f6f8fa; color: #000088; font-family: Consolas, Inconsolata, Courier, monospace; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: bold;">function</span><span style="box-sizing: border-box; font-size: 14px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: pre; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #f6f8fa; color: #4f4f4f; font-family: Consolas, Inconsolata, Courier, monospace; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: bold;">(e)</span><span style="box-sizing: border-box; font-size: 14px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: pre; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #f6f8fa; color: #000000; font-family: Consolas, Inconsolata, Courier, monospace; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: bold;">{</span></div><div><span style="box-sizing: border-box; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: pre; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #f6f8fa;"><span style="background-color: #f6f8fa; font-size: 10pt; font-variant-caps: normal; font-variant-ligatures: normal;">就是当点击document时查看子元素是否是button,是就执行方法</span></span></div><div><span style="box-sizing: border-box; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: pre; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #f6f8fa;"><span style="background-color: #f6f8fa; font-size: 10pt;">参考网址:</span></span></div><div><a shape="rect" href="https://www.cnblogs.com/zhoushengxiu/p/5703095.html" target="_blank">https://www.cnblogs.com/zhoushengxiu/p/5703095.html</a><br clear="none"/></div><div><br clear="none"/></div><div>3.(慕课网:jq源码解析 架构 2-5)</div><div>aAron.extend = aAron.fn.extend = function() {</div><div>var options, src, copy,</div><div>target = arguments[0] || {},</div><div>i = 1,</div><div>length = arguments.length;</div><div><br clear="none"/></div><div>//只有一个参数，就是对jQuery自身的扩展处理</div><div>//extend,fn.extend</div><div>if (i === length) {</div><div><span style="color: #b22222;">target = this;</span> //调用的上下文对象jQuery/或者实例</div><div>i--;</div><div>}</div><div><span style="color: #b22222;">for (; i &lt; length; i++) {</span></div><div>//从i开始取参数,不为空开始遍历</div><div>if ((options = arguments[i]) != null) {</div><div>for (name in options) {</div><div>copy = options[name];</div><div>//覆盖拷贝</div><div>target[name] = copy;</div><div>}</div><div>}</div><div><span style="color: #b22222;">}</span></div><div>return target;</div><div>}</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"> </td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>1.页面布局</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>5种方法写出三栏布局:</div><div>    两边300px中间自适应</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>1.float </div><div>2.position</div><div>3.flex</div><div>4.table</div><div>5.grid</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div>1.三个div的顺序应该是 left,right,center,原因是float属性可以让元素高度塌陷</div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>2.CSS盒模型</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>1.标准模型:width=content</div><div>2.IE模式(怪异模式):width=content+padding+border</div><div><br clear="none"/></div><div>如何切换这两种模式:box-sizing:content-box(默认值,标准模式),可以切换为border-box(怪异模式)</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>常见问题/提问方式</div><div>  1.基本概念:标准模型+ie模型</div><div>  2.两种模型之间的区别</div><div>  3.css如何设置这两种类型</div><div>  4.js如何获取盒模型对应的宽高</div><div>  5.根据盒模型解释边距重叠</div><div>  6.BFC(边距重叠解决方案 )</div><div><br clear="none"/></div><div><span style="color: #ff0000;">注:如何解决</span>边距重叠?</div><div>答:两个div,给第二个div添加一个父元素并设置overflow即可</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div>解答:</div><div>4. &gt;ele.style.width/height</div><div>    &gt;ele.currentStyle.width (IE)</div><div>    &gt;window.getComputedStyle(ele).width</div><div>&gt;ele.getBoundingClientRect().width</div><div>5.和BFC有关,具体案例查看视频3-4CSS盒模型(一) 时间&gt;14分</div><div><span style="font-size: 16px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; color: #2f2f2f; font-family: -apple-system, 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif; font-variant-caps: normal; font-variant-ligatures: normal;">BFC:块级格式化上下文</span></div><div>6. 触发BFC的方式（一下任意一条就可以）</div><div>1.float的值不为none</div><div>2.overflow的值不为visible</div><div>3.display的值为table-cell、tabble-caption和inline-block之一</div><div>4.position的值不为static或则releative中的任何一个</div><div>详情见网址:<a shape="rect" href="http://www.cnblogs.com/CafeMing/p/6252286.html" target="_blank">http://www.cnblogs.com/CafeMing/p/6252286.html</a><br clear="none"/></div><div>或者笔记:&lt;&lt;BFC的布局规则以及触发条件&gt;&gt;</div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>DOM事件类</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>1.基本概念:DOM事件的级别</div><div>2.DOM事件模型(冒泡,捕获)</div><div>3.DOM事件流</div><div>4.描述DOM事件捕获的具体流程</div><div>5.Event对象的常见应用</div><div>6.自定义事件</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><span style="font-weight: bold;">DOM事件类:</span></div><div>DOM0:ele.onclick 或者写在标签上</div><div>DOM1: <span style="letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: #333333; font-family: 微软雅黑, PMingLiU, Verdana, Arial, Helvetica, sans-serif;">1级DOM标准中并没有定义事件相关的内容，所以没有所谓的1级DOM事件模型。</span></div><div>DOM2:ele.addEventListener(&quot;click&quot;,function(){}) ,DOM2支持多个事件绑定</div><div>DOM3 ele.addEventListener('keyup',function(){}),还有自定义事件</div><div><span style="font-weight: bold;">事件模型:</span></div><div>捕获,</div><div>冒泡</div><div><span style="font-weight: bold;">事件流:</span></div><div>捕获</div><div>目标阶段</div><div>冒泡</div><div><span style="font-weight: bold;">描述DOM事件捕获的具体流程</span></div><div>window-&gt;document-&gt;html标签-&gt;body-&gt;.....-&gt;目标元素</div><div>冒泡相反</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div> document.body可以获取body标签</div><div>document.documentElement可以获取html标签</div><div>document主要控制文档内容,如:document .title</div><div>window主要控制浏览器,属于BOM的一个对象,如window.close();</div><div><span style="font-weight: bold;">Event对象的常见应用</span></div><div>e.preventDefault() 阻止默认事件</div><div>e.stopPropagation() 阻止冒泡</div><div>e.stopImmdeiatePropagation() 绑定多个事件的同一个元素,如果不加此方法,多个事件会全部触发,加上之后,没加的那些就不会触发了</div><div><span style="color: #ff4635;">e.currentTarget 绑定事件的元素,也就是委托的父元素</span></div><div><span style="color: #ff4635;">e.target 当前被点击的元素</span>(sourceElement早期ie)</div><div>参考:</div><div><a shape="rect" href="https://www.cnblogs.com/zhoushengxiu/p/5703095.html" target="_blank">https://www.cnblogs.com/zhoushengxiu/p/5703095.html</a><br clear="none"/></div><div><br clear="none"/></div><div><span style="font-weight: bold;">自定义事件,模拟事件</span></div><div>var event=new Event('test');</div><div>ele.addEventListener('test',function(){})</div><div>ele.dispatch(event )//触发事件</div><div><span style="font-weight: bold;">缺点,无法加数据</span></div><div>var event=new CustomEvent('test',obj);</div><div>可以添加自定义参数</div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>HTTP协议类</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>1.HTTP协议的主要特点</div><div>2.HTTP报文的组成部分</div><div>3.HTTP方法</div><div>4.POST和GET的区别</div><div>5.HTTP状态码</div><div>6.什么是持久连 接</div><div>7.什么是管线化</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>1.简单快速,灵活,无连接,无状态</div><div>2.<span style="font-weight: bold;">请求报文</span>:请求行,请求头,空行,请求体</div><div>   响应报文:状态行,响应头,空行,响应体</div><div>   请求行:http方法,页面地址,http协议,版本</div><div>    请求头,key-value值,让服务端获取客户端信息,比如用户代理</div><div>    空行:告诉服务器下面的事请求体了</div><div>    请求体:get-post的内容</div><div>     <span style="font-weight: bold;">响应报文</span>:</div><div><span style="letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; font-size: 14px; background-color: #efefef; color: #555555; font-family: Helvetica, Tahoma, Arial, sans-serif; font-variant-caps: normal; font-variant-ligatures: normal;">        ①报文协议及版本； </span></div><div><span style="letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; font-size: 14px; background-color: #efefef; color: #555555; font-family: Helvetica, Tahoma, Arial, sans-serif; font-variant-caps: normal; font-variant-ligatures: normal;">        ②状态码及状态描述； </span></div><div><span style="letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; font-size: 14px; background-color: #efefef; color: #555555; font-family: Helvetica, Tahoma, Arial, sans-serif; font-variant-caps: normal; font-variant-ligatures: normal;">        ③响应报文头，也是由多个属性组成； </span></div><div><span style="letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; font-size: 14px; background-color: #efefef; color: #555555; font-family: Helvetica, Tahoma, Arial, sans-serif; font-variant-caps: normal; font-variant-ligatures: normal;">        ④响应报文体，即我们真正要的“干货”。 </span></div><div><span style="font-size: 14px; background-color: #efefef; color: #555555; font-family: Helvetica, Tahoma, Arial, sans-serif;">     </span> <span style="font-size: 14px; background-color: #efefef; font-family: Helvetica, Tahoma, Arial, sans-serif;"> 3.GET            获取</span></div><div><span style="font-size: 14px; background-color: #efefef; font-family: Helvetica, Tahoma, Arial, sans-serif;">          POST          传输</span></div><div><span style="font-size: 14px; background-color: #efefef; font-family: Helvetica, Tahoma, Arial, sans-serif;">          PUT             更新资源</span></div><div><span style="font-size: 14px; background-color: #efefef; font-family: Helvetica, Tahoma, Arial, sans-serif;">          DELETE      删除资源</span></div><div><span style="font-size: 14px; background-color: #efefef; font-family: Helvetica, Tahoma, Arial, sans-serif;">          HEAD          获得报文首部</span></div><div><span style="font-size: 14px; background-color: #efefef; font-family: Helvetica, Tahoma, Arial, sans-serif;">        4.GET,POST区别:</span></div><div><img width="271" style="height: auto;" ext="png" height="506" src="cid:f95388308409e54b69504e7ede38ca8a.png" class="en-media"/></div><div>5.状态码:</div><div>    1xx：指示信息--表示请求已接收，继续处理。</div><div>    2xx：成功--表示请求已被成功接收、理解、接受。</div><div>    3xx：重定向--要完成请求必须进行更进一步的操作。</div><div>    4xx：客户端错误--请求有语法错误或请求无法实现。</div><div>    5xx：服务器端错误--服务器未能实现合法的请求。</div><div>6.持久连接:keep-alive,1.1开始支持</div><div>7.管线化</div><div>&gt;管线化技术——客户端可以发送多次请求到服务端，而不需要等待上一次请求得到响应的时候才能进行下一次请求。实现并行发送请求</div><div>&gt;前提是持久连接的情况下,打包请求和响应</div><div>&gt;仅HTTP/1.1支持此技术（HTTP/1.0不支持），并且只有GET和HEAD要求可以进行管线化，而POST则有所限制。</div><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div>状态码:<a shape="rect" href="https://blog.csdn.net/xiaoninvhuang/article/details/70257189" target="_blank">https://blog.csdn.net/xiaoninvhuang/article/details/70257189</a><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>原型链</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>1.创建原型链有几种方法</div><div>2.原型,构造函数,实例,原型链</div><div>3.instanceof原理</div><div>4.new 运算符</div><div><br clear="none"/></div><div><br clear="none"/></div><div>注:</div><div><span style="font-weight: bold;">什么是构造函数</span>:<span style="font-size: 12px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; color: #000000; font-family: 宋体;">当任意一个普通函数用于创建</span><span style="font-size: 12px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; color: #000000; font-family: 宋体;">一类</span><span style="font-size: 12px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: #000000; font-family: 宋体;">对象时，它就被称作构造函数</span></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div><div>1.</div><div><img width="217" style="height: auto;" ext="png" height="216" src="cid:fd97fb605982f3a602936e606c77ec4b.png" class="en-media"/></div><div>2.<img width="309" style="height: auto;" ext="png" height="216" src="cid:cc35d87fda8e1c28fd8be9989e5e280a.png" class="en-media"/></div><div><br clear="none"/></div><div>3.<img width="298" style="height: auto;" ext="png" height="106" src="cid:c031081256f8dc45b9a460d18beaecb3.png" class="en-media"/></div><div>实际上就是判断 实例对象.__proto__(可以无限__proto__) 与构造函数.prototype是不是引用的同一个地址</div><div>4.</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div>1.对象就是一个实例</div><div>2.任何函数都可以当做构造函数,new完了一定是构造函数</div><div>3.构造函数都有prototype属性</div><div>4.只要在原型链上的,instanceof返回的结果都是true,比如 o3 instanceof M是true,那么 o3 instanceof Object也是true</div><div>5.new的原理</div><div>6. <span style="font-size: 13px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #fefef2; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-variant-caps: normal; font-variant-ligatures: normal;">prototype是</span><span style="font-size: 13px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #fefef2; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-variant-caps: normal; font-variant-ligatures: normal;">函数</span><span style="font-size: 13px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #fefef2; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-variant-caps: normal; font-variant-ligatures: normal;">的内置属性， __proto__是</span><span style="font-size: 13px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #fefef2; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-variant-caps: normal; font-variant-ligatures: normal;">对象</span><span style="font-size: 13px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #fefef2; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-variant-caps: normal; font-variant-ligatures: normal;">的内置属性</span><span style="font-size: 13px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #fefef2; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-variant-caps: normal; font-variant-ligatures: normal;">是JS内部使用寻找原型链的属性。</span></div><div>7.object.create()原理:</div><div><a shape="rect" style="color: #0000ee; text-decoration: underline;" href="http://www.cnblogs.com/ones/p/8453984.html" target="_blank">http://www.cnblogs.com/ones/p/8453984.html</a><br clear="none"/></div><div><br clear="none"/></div><div><br clear="none"/></div><div><br clear="none"/></div><div><br clear="none"/></div><div><span style="color: #e30000;">__proto__和prototype的区别</span></div><div>    js中的对象都是new +构造函数创建的。而这个构造函数就是我们定义的函数。</div><div>    而所有的对象中都有__proto__属性，这个属性就是一个指针，指向构造函数中的prototype属性。</div><div>   我们可以做一个简单的验证</div><div>    var obj1={};</div><div>    console.log(obj1.__proto__===Object.prototype);</div><div style="box-sizing: border-box; outline: 0px; padding: 0px; margin: 0px 0px 16px; font-size: 16px; overflow-wrap: break-word; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff;"><span style="box-sizing: border-box; outline: 0px; font-size: 16px; overflow-wrap: break-word; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: #4f4f4f; font-family: -apple-system, 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif; font-variant-caps: normal; font-variant-ligatures: common-ligatures; line-height: 26px;">//输出 true</span></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>面向对象</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"> </td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>1.类的声明</div><div>function Animal (){</div><div> this.name=&quot;name&quot;;</div><div>}</div><div>es6:</div><div> class Animal2{</div><div>  constructor(){</div><div>    this.name=&quot;name&quot;;</div><div>  }</div><div>}</div><div>2.生成实例 new Animal(),new Animal2</div><div>3.继承&gt;</div><div>call方法(通过构造函数实现继承)</div><div><img width="164" style="height: auto;" ext="png" height="109" src="cid:63b3d32af218c44205a4855b132d0c13.png" class="en-media"/></div><div>缺点:无法继承来自Parent1的原型上的东西,只能部分继承</div><div>&gt;原型链继承</div><div><img width="238" style="height: auto;" ext="png" height="385" src="cid:bb8c286e332984d18c32f077825d220e.png" class="en-media"/></div><div>缺点:</div><div>改变了s1的属性同时也会影响到s2,因为原型链中的原型对象是公用的</div><div><span style="color: #ff0000;">注:</span>实际上new出来的新类.name是不存在的,通过查找新类.__proto__.name才会有,所以是在原型链上查找出来的</div><div>&gt;组合方式(企业通用方法)<img style="height: auto;" ext="png" width="163" height="129" src="cid:548359686e4cae8d93dacddfb1bb5add.png" class="en-media"/></div><div>缺点:new 2次,构造函数被执行了2次</div><div>第一次:Parent3.call()的时候</div><div>第二次:Child3的原型new Parent3的时候</div><div><span style="color: #ff0000;">注:</span>其实s3和s4分别有两套name和play,一份是call出来的,使用时直接s3.name,可以得出,一份是原型链上的s3.__proto__.name可以得出,该方法只是在call的基础上把parent的原型链继承给了Child3而已</div><div><br clear="none"/></div><div><br clear="none"/></div><div>优化</div><div><img style="height: auto;" ext="png" width="240" height="170" src="cid:a2e9fbc828164c0a1bfb05ab9e3852d7.png" class="en-media"/></div><div>缺点:constroctor指向父类</div><div>优化</div><div>测试过程中也可以</div><div>   function Parent4 () {</div><div>          this.name = 'parent4';</div><div>          this.play = [1, 2, 3];</div><div>      }</div><div>      function Child4 () {</div><div>          Parent4.call(this);</div><div>          this.type = 'child4';</div><div>      }</div><div>      Child4.prototype = Parent4.prototype;</div><div> <span style="color: #e30000;">Child4.prototype.constructor=Child4;</span></div><div>      var s5 = new Child4();</div><div>      var s6 = new Child4();</div><div>      console.log(s5, s6);</div><div><br clear="none"/></div><div>      console.log(s5 instanceof Child4, s5 instanceof Parent4);</div><div>      console.log(s5.constructor);</div><div>将<span style="color: #e30000;">constructor</span>设置回来即可,但是父类和子类的</div><div>constructor都变成子类了</div><div>&gt;终极优化</div><div><img width="336" style="height: auto;" ext="png" height="371" src="cid:efb8ba3733164fe4fef5afcd8f0cbb5b.png" class="en-media"/></div><div>var o=Object.create(parent)是把参数parent当做原型对象传给o的,所以o并不具备parent的属性,但是o的__proto__具有,因为o.__proto__===parent</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div>未掌握://1.constructor</div><div>           //2.原型链</div><div><br clear="none"/></div><div><span style="color: #ff0000;">注:</span>原型链继承由于new的时候是把原型对象上的属性复制给新对象,于是新对象相当于有两个相同属性,如果新对象为o,那么他既有o.name,又有o.__proto__.name,修改两个的时候互不影响,但是会影响原型链就是原型对象的.prototype,继而影响所有new出来的新对象</div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>通信类</div><div><br clear="none"/></div><div><br clear="none"/></div><div>复习文件:</div><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>1.什么是同源策略及限制</div><div>2.前后端如何通信</div><div>3.如何创建ajax</div><div>4.跨域通信的几种方式</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>1.协议,域名和端口不一致的情况下无法操作</div><div>2.AJAX(同源)</div><div>   WebSocket(不限制)</div><div>   CORS(新的,不限制) 浏览器发现跨域时自动在请求头添加Access-Control-Allow-Origin</div><div>3.</div><div><img style="height: auto;" ext="png" width="188" height="109" src="cid:6e25d499e78d6dc6be390bc6df90a351.png" class="en-media"/></div><div>1).var xhr = XMLHttpRequest</div><div>            ? new XMLHttpRequest()</div><div>            : new ActiveXObject('Microsoft.XMLHTTP');</div><div>2).</div><div>    xhr.open(type, url, true);</div><div>    xhr.send();</div><div>    xhr.onload(function(){</div><div>        data=xhr.responseText</div><div>    })</div><div>4.</div><div><img style="height: auto;" ext="png" width="84" height="127" src="cid:6d3fec632b1d23a3a1e31237a5552ddf.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div>1.jsonp原理:利用script标签可以跨域</div><div>             jsonp 利用script的异步加载</div><div>//todo:手写ajax代码,手写一遍jsonp.js</div><div><br clear="none"/></div><div><br clear="none"/></div><div><span style="font-family: Consolas, 'Courier New', Courier, mono, serif;">postMessage传递过来数据时监控方式:</span></div><div><span style="font-size: 12px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #f8f8f8; color: #000000; font-family: Consolas, 'Courier New', Courier, mono, serif; font-variant-caps: normal; font-variant-ligatures: normal;">window.addEventListener('message', onmessage, false);  </span></div><div><br clear="none"/></div><div><br clear="none"/></div><div><span style="font-family: Consolas, 'Courier New', Courier, mono, serif;">Hash传递过来数据时监控方式:</span></div><div><span style="font-size: 12px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #f8f8f8; color: #000000; font-family: Consolas, 'Courier New', Courier, mono, serif; font-variant-caps: normal; font-variant-ligatures: normal;">window.addEventListener('hashchange', onmessage, false);  </span></div><div><br clear="none"/></div><div><br clear="none"/></div><div><br clear="none"/></div><div><br clear="none"/></div><div><br clear="none"/></div><div><br clear="none"/></div><div><br clear="none"/></div><div><br clear="none"/></div><div><br clear="none"/></div><div><br clear="none"/></div><div><br clear="none"/></div><div><br clear="none"/></div><div><span style="font-size: 12px; background-color: #f8f8f8; font-family: Consolas, 'Courier New', Courier, mono, serif;">4.</span></div><div><span style="font-family: Consolas, 'Courier New', Courier, mono, serif;">jsonp 只能get</span></div><div><span style="font-family: Consolas, 'Courier New', Courier, mono, serif;">hash的改变不刷新页面,常用于iframe,onhashchange能监控hash的变化</span></div><div><span style="font-family: Consolas, 'Courier New', Courier, mono, serif;">postMessage:</span></div><div>WebSocket:</div><div>CORS:</div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>安全类</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>1.CSRF</div><div>2.XSS</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>1.跨站请求伪造</div><div><img width="287" style="height: auto;" ext="png" height="309" src="cid:c048aa80868a1743facb80d23b5024c1.png" class="en-media"/></div><div>   攻击原理：</div><div>防御措施:.a加token验证</div><div>              b.referer验证  来源 </div><div>              c.隐藏令牌 一个隐藏的token</div><div>2.跨域脚本攻击</div><div>  防范措施:去除评论中的可执行脚本</div><div><br clear="none"/></div><div>两种攻击的区别 a.xss是向网页中插入脚本执行</div><div>b.csrf是利用漏洞执行接口,而且csrf依赖于用户登录网站</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div>todo://清楚csrf原理</div><div><br clear="none"/></div><div>1.用户登录A网站,并生成一个cookie</div><div>2.用户访问B,B有一个链接指向A,</div><div>3.用户点击钓鱼链接,于是带着cookie就去了A,达到了模拟用户操作的目的</div><div><br clear="none"/></div><div>防范:加token,因为token是惟一的黑客只能带着cookie去访问,而得不到中的数据,所以也得不到token</div><div><a shape="rect" href="https://blog.csdn.net/a4171175/article/details/78181477" target="_blank">https://blog.csdn.net/a4171175/article/details/78181477</a><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>算法类</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>1.排序</div><div>2.堆栈,队列,链表</div><div>3.递归</div><div>4.波兰式和逆波兰式</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>1.</div><div>快速排序：</div><div><a shape="rect" href="https://segmentfault.com/a/1190000009426421" target="_blank">https://segmentfault.com/a/1190000009426421</a><br clear="none"/></div><div>选择排序：</div><div><a shape="rect" href="https://segmentfault.com/a/1190000009366805" target="_blank">https://segmentfault.com/a/1190000009366805</a><br clear="none"/></div><div>希尔排序:</div><div><a shape="rect" href="https://segmentfault.com/a/1190000009461832" target="_blank">https://segmentfault.com/a/1190000009461832</a><br clear="none"/></div><div><a shape="rect" href="http://www.cnblogs.com/chengxiao/p/6104371.html" target="_blank">http://www.cnblogs.com/chengxiao/p/6104371.html</a><br clear="none"/></div><div>冒泡排序: <span style="font-size: 13px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #fefef2; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-variant-caps: normal; font-variant-ligatures: normal;">原理是临近的数字两两进行比较,按照从小到大或者从大到小的顺序进行交换</span></div><div><a shape="rect" href="http://www.cnblogs.com/kaima/archive/2009/09/02/1558615.html" target="_blank">http://www.cnblogs.com/kaima/archive/2009/09/02/1558615.html</a><br clear="none"/></div><div>选择排序是跟某一个数值去换,插入排序是找到位置插入</div><div>2.</div><div><img style="height: auto;" ext="png" width="344" height="95" src="cid:ea09ae160c85f0906590df7ea112a9b8.png" class="en-media"/></div><div>3.</div><div><img style="height: auto;" ext="png" width="346" height="32" src="cid:02c86ac22d32988ff4187f653d260bc3.png" class="en-media"/></div><div>4.<img style="height: auto;" ext="png" width="376" height="89" src="cid:36b651826f97325cd57ccecce38c229a.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div>没答上来的技巧:1.先理解题目的意思,实在看不懂,问面试官可否给点提示</div><div>2.判断使用哪种算法,分解难度,想到哪写到哪</div><div>3.写出伪代码</div><div>4.卡住的地方问面试官</div><div>5.说出用哪种算法,说出原理</div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>一个套路</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>vue 里面有new或者说一般都聊原型链,new一边就是面向对象-&gt;面向对象:封装,继承,多态-&gt;js原型链-&gt;继承的几种方法,优缺点-&gt;jquery实例与静态并存 jq.fn.init.prototype=jq.fn,使用到了this-&gt;this new的时候作用域变化-&gt;new的原理,-&gt;es6中 箭头函数this的变化</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>聊起css盒模型-&gt;</div><div>  1.基本概念:标准模型+ie模型</div><div>  2.两种模型之间的区别</div><div>  3.css如何设置这两种类型</div><div>  4.js如何获取盒模型对应的宽高</div><div>  5.根据盒模型解释边距重叠</div><div>  6.BFC(边距重叠解决方案 )</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>es6的一些常用语法</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>1.变量声明const和let</div><div>2.模板字符串</div><div>3.函数默认参数</div><div>4.箭头函数</div><div>5.拓展的对象功能(简写键值对)</div><div>6.Spread Operator 展开运算符(三个点儿...)</div><div>7.import 和 export</div><div>8. Promise</div><div>9.Generators</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>1.let可以解决闭包问题</div><div><span style="box-sizing: border-box; border-radius: 0px; white-space: pre; border: none;"><span style="font-size: 11pt;">4</span><span style="font-size: 11pt; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">.</span></span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #93a1a1; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">//例如：</span></div><div><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">[</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #2aa198; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">1</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">,</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #2aa198; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">2</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">,</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #2aa198; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">3</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">].map(</span> <span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">x</span> <span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">=&gt;</span> <span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">x +</span> <span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #2aa198; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">1</span> <span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">)</span></div><div><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #93a1a1; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">//等同于：</span></div><div><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">[</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #2aa198; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">1</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">,</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #2aa198; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">2</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">,</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #2aa198; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">3</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">].map((</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #859900; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">function</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">(</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">x</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">)</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">{</span></div><div><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #859900; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">return</span> <span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">x +</span> <span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #2aa198; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">1</span></div><div><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">}).bind(</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #859900; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">this</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">))</span></div><div><span style="box-sizing: border-box; border-radius: 0px; white-space: pre; border: none;"><span style="font-size: 10pt;">5</span></span><span style="box-sizing: border-box; border-radius: 0px; white-space: pre; border: none;"><span style="font-size: 10pt; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">.</span></span></div><div style="font-size: 9pt;"><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #859900; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">function</span> <span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #268bd2; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">people</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">(</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">name, age</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">)</span> <span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">{</span></div><div style="font-size: 9pt;"><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #859900; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">return</span> <span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">{</span></div><div style="font-size: 9pt;"><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">name,</span></div><div style="font-size: 9pt;"><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">age</span></div><div style="font-size: 9pt;"><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">};</span></div><div style="font-size: 9pt;"><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">}</span></div><div><span style="font-size: 10pt;"><span style="white-space: pre; font-size: 10pt;">6.</span></span><span style="font-size: 10pt; color: #657b83; font-family: Menlo;">//数组 const color = ['red', 'yellow'] const colorful = [...color, 'green', 'pink'] console.log(colorful) //[red, yellow, green, pink]</span></div><div><span style="font-size: 10pt;">8.</span></div><div><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">fetch(</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #2aa198; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">'/api/todos'</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">)</span></div><div><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">.then(</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">res</span> <span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">=&gt;</span> <span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">res.json())</span></div><div><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">.then(</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">data</span> <span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">=&gt;</span> <span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">({ data }))</span></div><div><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">.catch(</span><span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">err</span> <span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">=&gt;</span> <span style="box-sizing: border-box; font-size: 12px; border-radius: 0px; white-space: pre; border: none; color: #657b83; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;">({ err }));</span></div><div><span style="box-sizing: border-box; border-radius: 0px; white-space: pre; border: none;"><span style="font-size: 10pt; color: #657b83;">9.</span></span></div><div><span style="color: #657b83;">// 生成器 function *createIterator() { yield 1; yield 2; yield 3; } // 生成器能像正规函数那样被调用，但会返回一个迭代器 let iterator = createIterator(); console.log(iterator.next().value); // 1 console.log(iterator.next().value); // 2 console.log(iterator.next().value); // 3</span></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div>参考:</div><div>1.整篇文章:</div><div><a shape="rect" href="https://www.jianshu.com/p/287e0bb867ae" target="_blank">https://www.jianshu.com/p/287e0bb867ae</a><br clear="none"/></div><div>2.Promise 原理:</div><div><a shape="rect" href="https://www.cnblogs.com/zhansu/p/6530844.html" target="_blank">https://www.cnblogs.com/zhansu/p/6530844.html</a><br clear="none"/></div><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>箭头函数中的this和普通函数中的this对比</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><a shape="rect" href="https://www.cnblogs.com/fanzhanxiang/p/8888963.html" target="_blank">https://www.cnblogs.com/fanzhanxiang/p/8888963.html</a><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>LocalStorage和sessionStorage的用法以及使用区别</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>localStorage的生命周期是永久性的。即使关闭浏览器，数据也不会销毁，存储大小一般为5M,需要主动去销毁</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>sessionStorage 的生命周期是在浏览器关闭前。在整个浏览器未关闭前，其数据一直都是存在的。</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>JS中BOM和DOM的区别与联系</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>javacsript是通过访问BOM对象来访问、控制、修改客户端(浏览器)，由于BOM的window包含了document，可以说，<span style="color: #e30000;">BOM包含了DOM(对象)</span>，浏览器提供出来给予访问的是BOM对象，从BOM对象再访问到DOM对象，从而js可以操作浏览器以及浏览器读取到的文档</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><a shape="rect" href="https://blog.csdn.net/xiao_tommy/article/details/53231165" target="_blank">https://blog.csdn.net/xiao_tommy/article/details/53231165</a><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>变量声明加 var 和不加 var 的区别</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>由于变量声明自带不可删除属性，比较var num = 1 跟 num = 1，前者是变量声明，带不可删除属性，因此无法被删除；后者为全局变量的一个属性，因此可以从全局变量中删除。</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><a shape="rect" href="https://www.cnblogs.com/liuna/p/6140901.html" target="_blank">https://www.cnblogs.com/liuna/p/6140901.html</a><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>变量的提升</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>变量提升只提升函数名 而函数提升会提升整个函数题 注意：函数提升在变量提升上面。</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><a shape="rect" href="https://blog.csdn.net/demo_18/article/details/78493489" target="_blank">https://blog.csdn.net/demo_18/article/details/78493489</a><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div><span style="box-sizing: border-box; word-wrap: break-word; outline: none; font-size: 14px; letter-spacing: 0.32px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: #454545; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Microsoft YaHei', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: bold;">1.一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</span></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><span style="font-size: 14px; letter-spacing: 0.32px; color: #454545; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Microsoft YaHei', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';">（1）查找浏览器缓存</span></div><div><span style="font-size: 14px; letter-spacing: 0.32px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: #454545; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Microsoft YaHei', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-variant-caps: normal; font-variant-ligatures: normal;">（2）DNS解析、查找该域名对应的IP地址、重定向（301）、发出第二个GET请求</span></div><div><span style="font-size: 14px; letter-spacing: 0.32px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: #454545; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Microsoft YaHei', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-variant-caps: normal; font-variant-ligatures: normal;">（3）进行HTTP协议会话</span></div><div><span style="font-size: 14px; letter-spacing: 0.32px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: #454545; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Microsoft YaHei', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-variant-caps: normal; font-variant-ligatures: normal;">（4）客户端发送报头(请求报头)</span></div><div><span style="font-size: 14px; letter-spacing: 0.32px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; color: #454545; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Microsoft YaHei', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-variant-caps: normal; font-variant-ligatures: normal;">（5）服务器回馈报头(响应报头)</span></div><div><span style="font-size: 14px; letter-spacing: 0.32px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; color: #454545; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Microsoft YaHei', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-variant-caps: normal; font-variant-ligatures: normal;">（6）html文档开始下载</span></div><div><span style="font-size: 14px; letter-spacing: 0.32px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; color: #454545; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Microsoft YaHei', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-variant-caps: normal; font-variant-ligatures: normal;">（7）文档树建立，根据标记请求所需指定MIME类型的文件</span></div><div><span style="font-size: 14px; letter-spacing: 0.32px; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: #454545; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Microsoft YaHei', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-variant-caps: normal; font-variant-ligatures: normal;">（8）文件显示</span></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>jquery扩展</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>1.$.extend</div><div>2.$.fn.extend</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>1.静态扩展</div><div><span style="font-size: 12px; color: #000000; font-family: 'Courier New';">$.extend({</span></div><div><span style="font-size: 12px; color: #000000; font-family: 'Courier New';">sayHello:</span> <span style="font-size: 12px; color: #0000ff; font-family: 'Courier New';">function</span><span style="font-size: 12px; color: #000000; font-family: 'Courier New';">(</span><span style="font-size: 9pt; color: #000000; font-family: 'Courier New';">txt</span><span style="font-size: 12px; color: #000000; font-family: 'Courier New';">) {</span></div><div><span style="font-size: 12px; color: #000000; font-family: 'Courier New';">console.log(</span>'Hello,'+txt<span style="font-size: 12px; color: #000000; font-family: 'Courier New';">);</span></div><div><span style="font-size: 12px; color: #000000; font-family: 'Courier New';">}</span></div><div><span style="font-size: 12px; color: #000000; font-family: 'Courier New';">})</span></div><div><span style="font-size: 12px; color: #000000; font-family: 'Courier New';">$.sayHello('world');</span> <span style="font-size: 12px; color: #008000; font-family: 'Courier New';">//</span><span style="font-size: 12px; color: #008000; font-family: 'Courier New';">调用</span></div><div><span style="font-size: 12px; font-family: 'Courier New';">2.实例扩展：</span></div><div><span style="font-size: 12px; color: #000000; font-family: 'Courier New';">$.fn.extend({</span></div><div><span style="white-space: pre-wrap; word-wrap: break-word; font-size: 12px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: #000000; font-family: 'Courier New'; font-variant-caps: normal; font-variant-ligatures: normal;">myPlugin</span> <span style="font-size: 12px; color: #000000; font-family: 'Courier New';">:</span> <span style="font-size: 12px; color: #0000ff; font-family: 'Courier New';">function</span><span style="font-size: 12px; color: #000000; font-family: 'Courier New';">(</span><span style="font-size: 9pt; color: #000000; font-family: 'Courier New';">txt</span><span style="font-size: 12px; color: #000000; font-family: 'Courier New';">) {</span></div><div><span style="font-size: 12px; font-family: 'Courier New';">this.css('color','red')</span></div><div><span style="font-size: 12px; color: #000000; font-family: 'Courier New';">}</span></div><div><span style="font-size: 12px; color: #000000; font-family: 'Courier New';">})</span></div><div><span style="font-size: 12px; color: #000000; font-family: 'Courier New';">$(&quot;a&quot;).</span><span style="white-space: pre-wrap; word-wrap: break-word; font-size: 12px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: #000000; font-family: 'Courier New'; font-variant-caps: normal; font-variant-ligatures: normal;">myPlugin</span><span style="font-size: 12px; color: #000000; font-family: 'Courier New';">();</span> <span style="font-size: 12px; color: #008000; font-family: 'Courier New';">//</span><span style="font-size: 12px; color: #008000; font-family: 'Courier New';">调用</span></div><div><span style="font-size: 12px; color: #ff4635; font-family: 'Courier New';">并且实例扩展还能添加参数</span></div><div><span style="font-size: 12px; color: #000000; font-family: 'Courier New';">options={color:'red',width:'100px'}</span></div><div><span style="font-size: 12px; color: #000000; font-family: 'Courier New';">$(&quot;a&quot;).</span><span style="font-size: 12px; white-space: pre-wrap; word-wrap: break-word; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: #000000; font-family: 'Courier New'; font-variant-caps: normal; font-variant-ligatures: normal;">myPlugin</span><span style="font-size: 12px; color: #000000; font-family: 'Courier New';">(options);</span></div><div><span style="font-size: 12px; font-family: 'Courier New';">插件内部再使用$.extend合并对象$.extend(opt,options)</span></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>Vuex</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div style="margin-top: 1em; margin-bottom: 1em;">Vuex<span style="font-family: 宋体; -en-paragraph: true;">是一个状态管理器，用于管理某些值的变化，统一对值的操作，把组件共享的值抽取出来，以全局模式管理，方法使得控制值的方法可复用</span></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>1.Vuex <span style="font-family: 宋体; -en-paragraph: true;">中</span> getters<span style="font-family: 宋体; -en-paragraph: true;">相当于一个过滤器，可以在其中添加方法，然后给组件的</span>computed<span style="font-family: 宋体; -en-paragraph: true;">使用</span></div><div style="margin-top: 1em; margin-bottom: 1em;">2.mutations<span style="font-family: 宋体; -en-paragraph: true;">表示可以调用的方法</span></div><div>3.vuex<span style="font-family: 宋体; -en-paragraph: true;">的目的类似于将数据提取成</span>model<span style="font-family: 宋体; -en-paragraph: true;">的形式，然后对</span>model<span style="font-family: 宋体; -en-paragraph: true;">进行数据操作并封装成方法给</span>vue<span style="font-family: 宋体; -en-paragraph: true;">的组件中调用：</span>method<span style="font-family: 宋体; -en-paragraph: true;">对应</span>mutations<span style="font-family: 宋体; -en-paragraph: true;">，</span>computed<span style="font-family: 宋体; -en-paragraph: true;">对应</span>state,getters</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>Promise原理</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>Angular和Vue的差别</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>1.angular中的双向数据绑定是基于脏检查机制</div><div>vue的双向数据绑定是基于ES5的getter和setter来实现, </div><div>2.vue比angular更轻量, 性能上更高效, 比angular更容易上手, 学习成本低,</div><div>3.而vue可以有过个vue实例,ngview只能有一个, 不能嵌套多个视图</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>面向对象多态：</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>父类new子类，子类中的方法重写了父类，导致new不同的子类可以表现出不同的状态</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><a shape="rect" href="https://www.cnblogs.com/chenssy/p/3372798.html" target="_blank">https://www.cnblogs.com/chenssy/p/3372798.html</a><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div><span style="font-size: 19px; color: #e30000;">二面/三面</span></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"> </td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>赞美面试官研究的深,懂得多</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>渲染机制</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>1.什么是DOCTYPE及作用</div><div>2.浏览器渲染过程</div><div>3.重排Reflow</div><div>4.重绘Repaint</div><div>5.布局Layout</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>1:DTD文档类型定义,DOCTYPE作用是告诉浏览器是哪个DTD</div><div>都有哪些类型:</div><div>4.0有两种模式:严格模式,传统模式</div><div>区别:严格模式不包括展示性和弃用的元素比如&lt;font&gt;已经被废弃</div><div><img style="height: auto;" ext="png" width="496" height="191" src="cid:6ce1278b8ac02e9a5fe2c71d1bae7e8d.png" class="en-media"/></div><div>2.渲染过程:</div><div>   <img width="326" style="height: auto;" ext="png" height="196" src="cid:181bc7ce0b40393c1a5f06baf7b549ec.png" class="en-media"/></div><div>3.&gt;</div><ul><li><div>重排:<span style="font-weight: bold;">定义</span>:每个元素都有自己的盒子,浏览器根据CSS和js结算处结果让元素出现在他的位置,重新修改dom之后浏览器该做的事</div></li></ul><div><span style="font-weight: bold;">触发条件</span>:增加删除,修改dom节点会导致重排或重绘</div><div>   &gt;移动dom位置</div><div>   &gt;修改部分CSS,如宽高</div><div>   &gt;Resize或者Scroll窗口有可能</div><div>   &gt;修改网页字体</div><ul><li><div><span style="font-weight: bold;">重绘</span>:页面要出现的内容统统画在屏幕上</div></li></ul><div><span style="font-weight: bold;">触发条件</span>:DOM改动</div><div>              CSS改动</div><div>               repaint无法避免,减少方法:使用文档片段,一次添加</div><div><span style="font-weight: bold;">区别:</span>元素或内容的重新绘制:比如元素颜色改变,形状改变,需要重绘,</div><div>位置改变则需要重[]排</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div>视频4-1</div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>js运行机制</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><img style="height: auto;" ext="png" width="195" height="160" src="cid:612928863156f8fac7f7adbaa3926f8f.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>1.settimeout运行机制<img width="272" style="height: auto;" ext="png" height="140" src="cid:77a654ffeb39f2978c2efbc4551dd82d.png" class="en-media"/></div><div>2.</div><div><img style="height: auto;" ext="png" width="116" height="114" src="cid:d44884b5be3b425e627cbe061d9939a3.png" class="en-media"/></div><div>3.</div><div><img style="height: auto;" ext="png" width="133" height="97" src="cid:c9ed179666e10f14ae8ff5a4f31b56ef.png" class="en-media"/></div><div>4.</div><div><img style="height: auto;" ext="png" width="204" height="112" src="cid:6f02e08b46b1b7d1f1099243306b0d65.png" class="en-media"/></div><div><br clear="none"/></div><div><img style="height: auto;" ext="png" width="161" height="136" src="cid:f26d6b526cbfd5092a37362d8a647a1e.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div>1.答案为 132,因为settimeout浏览器有最小时间,虽然写的是0,实际上也不会是0,浏览器优先响应同步任务</div><div><br clear="none"/></div><div><br clear="none"/></div><div><br clear="none"/></div><div><br clear="none"/></div><div><br clear="none"/></div><div>2.答案为A,while为死循环,而且是循环任务,所以永远不会输出B</div><div><br clear="none"/></div><div><br clear="none"/></div><div><br clear="none"/></div><div><br clear="none"/></div><div><br clear="none"/></div><div>3.答案还是A,由于js是同步的,虽然settimeout到时间了,但是while还没有执行完,B依然要等待</div><div><br clear="none"/></div><div><br clear="none"/></div><div>4.输出结果永远是4</div><div>   解决方法:使用闭包</div><div>上面这个是错误的,会立即输出0-5</div><div><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace; font-weight: bold;">for</span> <span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">(</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace; font-weight: bold;">var</span> <span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">i</span> <span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace; font-weight: bold;">=</span> <span style="border-radius: 3px; background-color: #f6f6f6; color: #0084ff; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">0</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">;</span> <span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">i</span> <span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace; font-weight: bold;">&lt;</span> <span style="border-radius: 3px; background-color: #f6f6f6; color: #0084ff; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">5</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">;</span> <span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">i</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace; font-weight: bold;">++</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">)</span> <span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">{</span></div><div><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">(</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace; font-weight: bold;">function</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">(</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">i</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">)</span> <span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">{</span></div><div><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">setTimeout</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">(</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace; font-weight: bold;">function</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">()</span> <span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">{</span></div><div><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">console</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">.</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">log</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">(</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">i</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">);</span></div><div><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">},</span> <span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">i</span> <span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace; font-weight: bold;">*</span> <span style="border-radius: 3px; background-color: #f6f6f6; color: #0084ff; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">1000</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">);</span></div><div><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">})(</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">i</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">);</span><span style="border-radius: 3px; background-color: #f6f6f6; font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;">}</span></div><div>event loop</div><div>任务队列,</div><div>执行栈空了之后继续监听任务队列,如果有,就取出来执行,反复的循环就是event loop</div><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;">bind()方法</td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><a shape="rect" href="http://www.cnblogs.com/xxxxBW/p/4914567.html" target="_blank">http://www.cnblogs.com/xxxxBW/p/4914567.html</a><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>类似于call,apply,但是只绑定不执行</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;">call,apply</td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><span style="font-size: 14px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: #000000; font-family: 'Helvetica Neue', Helvetica, Arial, 'PingFang SC', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', 'Microsoft Yahei', sans-serif; font-variant-caps: normal; font-variant-ligatures: normal;">apply 是把参数放在数组里。　　</span></div><div><span style="font-size: 14px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: #000000; font-family: 'Helvetica Neue', Helvetica, Arial, 'PingFang SC', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', 'Microsoft Yahei', sans-serif; font-variant-caps: normal; font-variant-ligatures: normal;">call 需要把参数按顺序传递进去</span></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div style="background-color: #272822; font-size: 14px; letter-spacing: normal; orphans: 2; white-space: pre; widows: 2; word-spacing: 0px;"><span style="overflow: auto; white-space: pre; font-size: 14px; color: #f92672; font-family: 'Courier New'; font-variant-caps: normal; font-variant-ligatures: normal; line-height: 1.5;">func</span><span style="overflow: auto; white-space: pre; font-size: 14px; color: #a6e22e; font-family: 'Courier New'; font-variant-caps: normal; font-variant-ligatures: normal; line-height: 1.5;">.call</span><span style="font-size: 14px; color: #f8f8f2; font-family: 'Courier New', sans-serif; font-variant-caps: normal; font-variant-ligatures: normal; line-height: 1.5;">(</span><span style="overflow: auto; white-space: pre; font-size: 14px; color: #f92672; font-family: 'Courier New'; font-variant-caps: normal; font-variant-ligatures: normal; line-height: 1.5;">this</span><span style="overflow: auto; white-space: pre; font-size: 14px; color: #f8f8f2; font-family: 'Courier New'; font-variant-caps: normal; font-variant-ligatures: normal; line-height: 1.5;">,</span> <span style="overflow: auto; white-space: pre; font-size: 14px; color: #f92672; font-family: 'Courier New'; font-variant-caps: normal; font-variant-ligatures: normal; line-height: 1.5;">arg1</span><span style="overflow: auto; white-space: pre; font-size: 14px; color: #f8f8f2; font-family: 'Courier New'; font-variant-caps: normal; font-variant-ligatures: normal; line-height: 1.5;">,</span> <span style="overflow: auto; white-space: pre; font-size: 14px; color: #f92672; font-family: 'Courier New'; font-variant-caps: normal; font-variant-ligatures: normal; line-height: 1.5;">arg2</span><span style="overflow: auto; white-space: pre; font-size: 14px; color: #f8f8f2; font-family: 'Courier New'; font-variant-caps: normal; font-variant-ligatures: normal; line-height: 1.5;">);</span></div><div style="background-color: #272822; font-size: 14px; letter-spacing: normal; orphans: 2; white-space: pre; widows: 2; word-spacing: 0px;"><span style="overflow: auto; white-space: pre; font-size: 14px; color: #f92672; font-family: 'Courier New'; font-variant-caps: normal; font-variant-ligatures: normal; line-height: 1.5;">func</span><span style="overflow: auto; white-space: pre; font-size: 14px; color: #a6e22e; font-family: 'Courier New'; font-variant-caps: normal; font-variant-ligatures: normal; line-height: 1.5;">.apply</span><span style="overflow: auto; white-space: pre; font-size: 14px; color: #f8f8f2; font-family: 'Courier New'; font-variant-caps: normal; font-variant-ligatures: normal; line-height: 1.5;">(</span><span style="overflow: auto; white-space: pre; font-size: 14px; color: #f92672; font-family: 'Courier New'; font-variant-caps: normal; font-variant-ligatures: normal; line-height: 1.5;">this</span><span style="font-size: 14px; color: #f8f8f2; font-family: 'Courier New', sans-serif; font-variant-caps: normal; font-variant-ligatures: normal; line-height: 1.5;">,</span> <span style="overflow: auto; white-space: pre; font-size: 14px; color: #e6db74; font-family: 'Courier New'; font-variant-caps: normal; font-variant-ligatures: normal; line-height: 1.5;">[arg1, arg2]</span><span style="font-size: 14px; color: #f8f8f2; font-family: 'Courier New', sans-serif; font-variant-caps: normal; font-variant-ligatures: normal; line-height: 1.5;">)</span></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>闭包相关问题</div><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><a shape="rect" href="http://www.cnblogs.com/qieguo/p/5457040.html" target="_blank">http://www.cnblogs.com/qieguo/p/5457040.html</a>(面试)</div><div><a shape="rect" href="https://www.jianshu.com/p/3a3fbed1ddf1" target="_blank">https://www.jianshu.com/p/3a3fbed1ddf1</a>(原理)</div><div>a.闭包的作用:模拟私有变量</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>当其中一个这样的内部函数在包含它们的外部函数之外被调用时，就会形成闭包。</div><div><a shape="rect" href="http://www.cnblogs.com/yunfeifei/p/4019504.html" target="_blank">http://www.cnblogs.com/yunfeifei/p/4019504.html</a><br clear="none"/></div><div><br clear="none"/></div><div>a.<a shape="rect" href="https://blog.csdn.net/u011240877/article/details/70202456" target="_blank">https://blog.csdn.net/u011240877/article/details/70202456</a><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>this指向性问题</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>普通函数内部的this分两种情况，严格模式和非严格模式。</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>非严格模式下，this 默认指向全局对象window</div><div>而严格模式下， this为undefined</div><div>箭头函数可以捕获其所在上下文的this值</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><a shape="rect" href="http://www.cnblogs.com/dongcanliang/p/7054176.html" target="_blank">http://www.cnblogs.com/dongcanliang/p/7054176.html</a><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>严格模式</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>1.在严格模式下，变量必须显示声明(var/let/const)</div><div>2.在严格模式下，this默认是undefined</div><div>3.严格模式下，不允许给未声明的变量赋值</div><div>4.严格模式下，不允许给未声明的变量赋值</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;">博客园</td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><a shape="rect" href="https://www.cnblogs.com/ones" target="_blank">https://www.cnblogs.com/ones</a><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>vue 双向绑定实现</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div>Object.defineProperty()</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><img ext="png" width="652" height="521" src="cid:2091638fc3435786a698bdafb933faa7.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div>原理:利用defineProperty的set方法进行劫持</div><div>缺点: <span style="font-size: 16px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: #2f2f2f; font-family: -apple-system, 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif; font-variant-caps: normal; font-variant-ligatures: normal;">只能劫持对象的属性,因此我们需要对每个对象的每个属性进行遍历，如果属性值也是对象那么需要深度遍历,显然能劫持一个完整的对象是更好的选择。(百度说的)</span></div><div><br clear="none"/></div><div><span style="font-size: 16px; color: #2f2f2f; font-family: -apple-system, 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif;">新方法proxy.至少性能会更好</span></div><div><br clear="none"/></div><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>页面性能类</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><img style="height: auto;" ext="png" width="478" height="196" src="cid:1a6903133f0f4684ac91d4478ec1d4c5.png" class="en-media"/></div><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div><div><br clear="none"/></div><div>2.</div><div><img width="282" style="height: auto;" ext="png" height="140" src="cid:c10cafcac57d95fc5562d76c015695c3.png" class="en-media"/></div><div>2.1.1)动态创建节点,用js创建</div><div>   2),3)js标签写入即可</div><div><br clear="none"/></div><div>defer只有在网页完成后才可以执行</div><div>3.</div><div><img width="295" style="height: auto;" ext="png" height="166" src="cid:2b647fd4fde749d8b0e8d81a7bca21eb.png" class="en-media"/></div><div>3.1.1)如果报文头两条都有以第二条为准</div><div>   1.2)last-那个是响应报文返回的时间,if-是请求报文中附带的,第一次获得时二者时间是一致的</div><div>Etag是一个hash值,判断文件是否有内容变化,响应报文中带,if-none是请求中给出,二者值一致 </div><div>5.第一个标签.https网站一般浏览器默认关闭a标签的预解析,使用该标签强制打开a标签预解析</div><div>第二个</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div>错误监控类</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><img style="height: auto;" ext="png" width="132" height="92" src="cid:d23618e562111a74f9cba0db9baa1b24.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>问法:如何保证产品质量</div><div><br clear="none"/></div><div><img style="height: auto;" ext="png" width="167" height="108" src="cid:a8d8b7a029c94f1e0759f4ade2fbc7e8.png" class="en-media"/></div><div><br clear="none"/></div><div><img width="300" style="height: auto;" ext="png" height="200" src="cid:c811e11dcf27f5308fba4146b80d4b12.png" class="en-media"/></div><div>1.object.onerror:object表示元素:例如image或者script标签,都有onerror事件</div><div>2.object.onerror专用于资源加载错误</div><div>window.onerror专用于即时运行错误</div><div>因为object.onerror不冒泡</div><div>3.performance.getEntries()高级浏览器可用,能显示出成功加载的资源,用所有资源减去成功的,可得到失败的</div><div>4.Error事件不冒泡,但是可以捕获</div><div><br clear="none"/></div><div><img width="298" style="height: auto;" ext="png" height="185" src="cid:6bed08692e4ba1bd8ba84053e61310c6.png" class="en-media"/></div><div>1.在客户端加入代码</div><div>2.在服务端加入代码</div><div><br clear="none"/></div><div><br clear="none"/></div><div><img style="height: auto;" ext="png" width="192" height="116" src="cid:6fee17a0dfcd1f9cfee661bcf61a68fe.png" class="en-media"/></div><div>1.可以做到,但是不通用</div><div>2.代码:</div><div><img width="305" style="height: auto;" ext="png" height="32" src="cid:cf212c33c87af3cfd444bcd0e2023475.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div><span style="font-size: 19px; color: #e30000;">三面/四面</span></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><img style="height: auto;" ext="png" width="90" height="136" src="cid:e217e6d2e7cda333eda86afc3a0d4146.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>1.项目架构,技术能力,人员组织,技术难点攻克,轻描淡写没亮点不行</div><div>2.提前演练第一条内容,把握时间</div><div>3.如果是业务负责人,即使没问到项目,也要把准备的说出来,如何找时机,当面试官表现出没兴趣时,要抓住时机或者聊得很投机的时候</div><div>4.用词说话要谦虚,但是要表现自己,不能谦虚</div><div>5.不要把话说满,留一部分让面试官去问</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><img style="height: auto;" ext="png" width="413" height="116" src="cid:3d00c743801cae0a98131f1d9a6bbc8d.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><img width="296" style="height: auto;" ext="png" height="222" src="cid:89ff985cadd69a11e241f9b636e138f1.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"> </td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><img style="height: auto;" ext="png" width="388" height="162" src="cid:be6826b1f8bd0233095d75b61f34bc09.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><img style="height: auto;" ext="png" width="187" height="160" src="cid:38eb4a94c73aaa4c38de130ea5a94d97.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><img style="height: auto;" ext="png" width="285" height="132" src="cid:69186488538a1c9c6fed69b37afb06ac.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><img style="height: auto;" ext="png" width="136" height="134" src="cid:2f4533d16cfb1c597e878166ef55954e.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div><span style="font-size: 19px; color: #e30000;">终面</span></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><img style="height: auto;" ext="png" width="221" height="185" src="cid:648431cf7d2053c86cab5aef6c2d4836.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><img style="height: auto;" ext="png" width="198" height="111" src="cid:08f102624f6f4187610b29016fbaf645.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><img style="height: auto;" ext="png" width="324" height="220" src="cid:1d95fd0475317713b2c6506dcbb08f40.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>1.努力超越别人,做到了比别人强</div><div>2.可以简单讲讲业务,遇到了什么问题,为了找到最好的解决方法如何努力,比如加班什么的</div><div>3.周末喜欢干什么,比如听听别人的分享,学习点什么</div><div>4.表现出非常愿意配合公司加班,表现的有责任心</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><img style="height: auto;" ext="png" width="379" height="219" src="cid:1fd09ab3ec129d4d00c10470eb1a9bb5.png" class="en-media"/></div><div>         5.多赞美公司和hr</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>拥有激情和热情</div><div>希望公司提供机会,比如:学习的机会,交流的机会,进修,技术分享会等等</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div><span style="font-size: 19px; color: #e30000;">总结</span></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><img style="height: auto;" ext="png" width="373" height="181" src="cid:002fa6068b9fb88aff43083777956ce4.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>1.社招一定要看准职位描述,分析需要的技术栈,简历一定要和职位描述一致</div><div>2.自我介绍一定要打草稿,面试官有可能要根据自我描述来问问题</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><img style="height: auto;" ext="png" width="276" height="180" src="cid:c42fbabff7a36dac7d556d032d7ca716.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div>不会的问题要思考一下,不要直接说不会</div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><img style="height: auto;" ext="png" width="312" height="120" src="cid:0d60e908b4d9ebec50b05f2ab4675c97.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr><tr><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 244px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 285px; padding: 8px;"><div><img style="height: auto;" ext="png" width="517" height="180" src="cid:00fa26140a7557cadf15d5f6e023a7f3.png" class="en-media"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 354px; padding: 8px;"><div><br clear="none"/></div></td><td colspan="1" rowspan="1" style="border: 1px solid #d3d3d3; width: 359px; padding: 8px;"><div><br clear="none"/></div></td></tr></table><div><br clear="none"/></div><div><br clear="none"/></div></div><div><br clear="none"/></div></div>
<table cellspacing="0" cellpadding="0" width="100%" style="margin-bottom:16px;margin-top:32px;padding-top:16px;border-top:1px solid #d3d3d3;">
  <tr>
   <td style="text-align:left;font-size:13px;line-height:18px;color:#747474;font-family:Helvetica, Arial, sans-serif;">
     印象笔记，让记忆永存。<a href='https://app.yinxiang.com/getit?utm_source=service&utm_medium=email&utm_content=emailNote&email_name=emailNote&email_guid=e70c9e87-a696-447e-90c5-f8b5b1ce8e8c&email_link=download_app' target='_blank' style='color: #5fb336; text-decoration: none;'>下载印象笔记</a>
   </td>
  </tr>
</table>

</body>
</html>
